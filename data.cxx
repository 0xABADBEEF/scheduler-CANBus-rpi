// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file data.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace
{
    char dummy;
} // namespace
#endif // _WIN32

#include "data.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>

using namespace eprosima::fastcdr::exception;

#include <utility>

can_frame_from_dds::can_frame_from_dds()
{
    // m_ifn com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3701eaf6
    m_ifn = 0;
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@627551fb
    m_id = 0;
    // m_idType com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b552920
    m_idType = 0;
    // m_dataSize com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2758fe70
    m_dataSize = 0;
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@1f36e637
    memset(&m_data, 0, (8) * 1);
    // m_timeStamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@578486a3
    m_timeStamp = 0;
}

can_frame_from_dds::~can_frame_from_dds()
{
}

can_frame_from_dds::can_frame_from_dds(
    const can_frame_from_dds &x)
{
    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;
    m_timeStamp = x.m_timeStamp;
}

can_frame_from_dds::can_frame_from_dds(
    can_frame_from_dds &&x)
{
    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);
    m_timeStamp = x.m_timeStamp;
}

can_frame_from_dds &can_frame_from_dds::operator=(
    const can_frame_from_dds &x)
{

    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;
    m_timeStamp = x.m_timeStamp;

    return *this;
}

can_frame_from_dds &can_frame_from_dds::operator=(
    can_frame_from_dds &&x)
{

    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);
    m_timeStamp = x.m_timeStamp;

    return *this;
}

bool can_frame_from_dds::operator==(
    const can_frame_from_dds &x)
{

    return (m_ifn == x.m_ifn && m_id == x.m_id && m_idType == x.m_idType && m_dataSize == x.m_dataSize &&
            m_data == x.m_data && m_timeStamp == x.m_timeStamp);
}

bool can_frame_from_dds::operator!=(
    const can_frame_from_dds &x)
{
    return !(*this == x);
}

size_t can_frame_from_dds::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

size_t can_frame_from_dds::getCdrSerializedSize(
    const can_frame_from_dds &data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    if ((8) > 0)
    {
        current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

void can_frame_from_dds::serialize(
    eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_ifn;
    scdr << m_id;
    scdr << m_idType;
    scdr << m_dataSize;
    scdr << m_data;

    scdr << m_timeStamp;
}

void can_frame_from_dds::deserialize(
    eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_ifn;
    dcdr >> m_id;
    dcdr >> m_idType;
    dcdr >> m_dataSize;
    dcdr >> m_data;

    dcdr >> m_timeStamp;
}

/*!
 * @brief This function sets a value in member ifn
 * @param _ifn New value for member ifn
 */
void can_frame_from_dds::ifn(
    uint8_t _ifn)
{
    m_ifn = _ifn;
}

/*!
 * @brief This function returns the value of member ifn
 * @return Value of member ifn
 */
uint8_t can_frame_from_dds::ifn() const
{
    return m_ifn;
}

/*!
 * @brief This function returns a reference to member ifn
 * @return Reference to member ifn
 */
uint8_t &can_frame_from_dds::ifn()
{
    return m_ifn;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void can_frame_from_dds::id(
    uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t can_frame_from_dds::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t &can_frame_from_dds::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member idType
 * @param _idType New value for member idType
 */
void can_frame_from_dds::idType(
    uint8_t _idType)
{
    m_idType = _idType;
}

/*!
 * @brief This function returns the value of member idType
 * @return Value of member idType
 */
uint8_t can_frame_from_dds::idType() const
{
    return m_idType;
}

/*!
 * @brief This function returns a reference to member idType
 * @return Reference to member idType
 */
uint8_t &can_frame_from_dds::idType()
{
    return m_idType;
}

/*!
 * @brief This function sets a value in member dataSize
 * @param _dataSize New value for member dataSize
 */
void can_frame_from_dds::dataSize(
    uint8_t _dataSize)
{
    m_dataSize = _dataSize;
}

/*!
 * @brief This function returns the value of member dataSize
 * @return Value of member dataSize
 */
uint8_t can_frame_from_dds::dataSize() const
{
    return m_dataSize;
}

/*!
 * @brief This function returns a reference to member dataSize
 * @return Reference to member dataSize
 */
uint8_t &can_frame_from_dds::dataSize()
{
    return m_dataSize;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void can_frame_from_dds::data(
    const std::array<uint8_t, 8> &_data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void can_frame_from_dds::data(
    std::array<uint8_t, 8> &&_data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<uint8_t, 8> &can_frame_from_dds::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<uint8_t, 8> &can_frame_from_dds::data()
{
    return m_data;
}

/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void can_frame_from_dds::timeStamp(
    uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t can_frame_from_dds::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t &can_frame_from_dds::timeStamp()
{
    return m_timeStamp;
}

size_t can_frame_from_dds::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool can_frame_from_dds::isKeyDefined()
{
    return false;
}

void can_frame_from_dds::serializeKey(
    eprosima::fastcdr::Cdr &scdr) const
{
    (void)scdr;
}

can_frame_from_bus::can_frame_from_bus()
{
    // m_ifn com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3a883ce7
    m_ifn = 0;
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4973813a
    m_id = 0;
    // m_idType com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6321e813
    m_idType = 0;
    // m_dataSize com.eprosima.idl.parser.typecode.PrimitiveTypeCode@79be0360
    m_dataSize = 0;
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@22a67b4
    memset(&m_data, 0, (8) * 1);
    // m_timeStamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57855c9a
    m_timeStamp = 0;
}

can_frame_from_bus::~can_frame_from_bus()
{
}

can_frame_from_bus::can_frame_from_bus(
    const can_frame_from_bus &x)
{
    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;
    m_timeStamp = x.m_timeStamp;
}

can_frame_from_bus::can_frame_from_bus(
    can_frame_from_bus &&x)
{
    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);
    m_timeStamp = x.m_timeStamp;
}

can_frame_from_bus &can_frame_from_bus::operator=(
    const can_frame_from_bus &x)
{

    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;
    m_timeStamp = x.m_timeStamp;

    return *this;
}

can_frame_from_bus &can_frame_from_bus::operator=(
    can_frame_from_bus &&x)
{

    m_ifn = x.m_ifn;
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);
    m_timeStamp = x.m_timeStamp;

    return *this;
}

bool can_frame_from_bus::operator==(
    const can_frame_from_bus &x)
{

    return (m_ifn == x.m_ifn && m_id == x.m_id && m_idType == x.m_idType && m_dataSize == x.m_dataSize &&
            m_data == x.m_data && m_timeStamp == x.m_timeStamp);
}

bool can_frame_from_bus::operator!=(
    const can_frame_from_bus &x)
{
    return !(*this == x);
}

size_t can_frame_from_bus::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

size_t can_frame_from_bus::getCdrSerializedSize(
    const can_frame_from_bus &data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    if ((8) > 0)
    {
        current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

void can_frame_from_bus::serialize(
    eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_ifn;
    scdr << m_id;
    scdr << m_idType;
    scdr << m_dataSize;
    scdr << m_data;

    scdr << m_timeStamp;
}

void can_frame_from_bus::deserialize(
    eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_ifn;
    dcdr >> m_id;
    dcdr >> m_idType;
    dcdr >> m_dataSize;
    dcdr >> m_data;

    dcdr >> m_timeStamp;
}

/*!
 * @brief This function sets a value in member ifn
 * @param _ifn New value for member ifn
 */
void can_frame_from_bus::ifn(
    uint8_t _ifn)
{
    m_ifn = _ifn;
}

/*!
 * @brief This function returns the value of member ifn
 * @return Value of member ifn
 */
uint8_t can_frame_from_bus::ifn() const
{
    return m_ifn;
}

/*!
 * @brief This function returns a reference to member ifn
 * @return Reference to member ifn
 */
uint8_t &can_frame_from_bus::ifn()
{
    return m_ifn;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void can_frame_from_bus::id(
    uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t can_frame_from_bus::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t &can_frame_from_bus::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member idType
 * @param _idType New value for member idType
 */
void can_frame_from_bus::idType(
    uint8_t _idType)
{
    m_idType = _idType;
}

/*!
 * @brief This function returns the value of member idType
 * @return Value of member idType
 */
uint8_t can_frame_from_bus::idType() const
{
    return m_idType;
}

/*!
 * @brief This function returns a reference to member idType
 * @return Reference to member idType
 */
uint8_t &can_frame_from_bus::idType()
{
    return m_idType;
}

/*!
 * @brief This function sets a value in member dataSize
 * @param _dataSize New value for member dataSize
 */
void can_frame_from_bus::dataSize(
    uint8_t _dataSize)
{
    m_dataSize = _dataSize;
}

/*!
 * @brief This function returns the value of member dataSize
 * @return Value of member dataSize
 */
uint8_t can_frame_from_bus::dataSize() const
{
    return m_dataSize;
}

/*!
 * @brief This function returns a reference to member dataSize
 * @return Reference to member dataSize
 */
uint8_t &can_frame_from_bus::dataSize()
{
    return m_dataSize;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void can_frame_from_bus::data(
    const std::array<uint8_t, 8> &_data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void can_frame_from_bus::data(
    std::array<uint8_t, 8> &&_data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<uint8_t, 8> &can_frame_from_bus::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<uint8_t, 8> &can_frame_from_bus::data()
{
    return m_data;
}

/*!
 * @brief This function sets a value in member timeStamp
 * @param _timeStamp New value for member timeStamp
 */
void can_frame_from_bus::timeStamp(
    uint64_t _timeStamp)
{
    m_timeStamp = _timeStamp;
}

/*!
 * @brief This function returns the value of member timeStamp
 * @return Value of member timeStamp
 */
uint64_t can_frame_from_bus::timeStamp() const
{
    return m_timeStamp;
}

/*!
 * @brief This function returns a reference to member timeStamp
 * @return Reference to member timeStamp
 */
uint64_t &can_frame_from_bus::timeStamp()
{
    return m_timeStamp;
}

size_t can_frame_from_bus::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool can_frame_from_bus::isKeyDefined()
{
    return false;
}

void can_frame_from_bus::serializeKey(
    eprosima::fastcdr::Cdr &scdr) const
{
    (void)scdr;
}

modification::modification()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7494e528
    m_id = 0;
    // m_idType com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4bbfb90a
    m_idType = 0;
    // m_dataSize com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7c29daf3
    m_dataSize = 0;
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@9660f4e
    memset(&m_data, 0, (8) * 1);
}

modification::~modification()
{
}

modification::modification(
    const modification &x)
{
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;
}

modification::modification(
    modification &&x)
{
    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);
}

modification &modification::operator=(
    const modification &x)
{

    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = x.m_data;

    return *this;
}

modification &modification::operator=(
    modification &&x)
{

    m_id = x.m_id;
    m_idType = x.m_idType;
    m_dataSize = x.m_dataSize;
    m_data = std::move(x.m_data);

    return *this;
}

bool modification::operator==(
    const modification &x)
{

    return (m_id == x.m_id && m_idType == x.m_idType && m_dataSize == x.m_dataSize && m_data == x.m_data);
}

bool modification::operator!=(
    const modification &x)
{
    return !(*this == x);
}

size_t modification::getMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    return current_alignment - initial_alignment;
}

size_t modification::getCdrSerializedSize(
    const modification &data,
    size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    if ((8) > 0)
    {
        current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void modification::serialize(
    eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_id;
    scdr << m_idType;
    scdr << m_dataSize;
    scdr << m_data;
}

void modification::deserialize(
    eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_id;
    dcdr >> m_idType;
    dcdr >> m_dataSize;
    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void modification::id(
    uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t modification::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t &modification::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member idType
 * @param _idType New value for member idType
 */
void modification::idType(
    uint8_t _idType)
{
    m_idType = _idType;
}

/*!
 * @brief This function returns the value of member idType
 * @return Value of member idType
 */
uint8_t modification::idType() const
{
    return m_idType;
}

/*!
 * @brief This function returns a reference to member idType
 * @return Reference to member idType
 */
uint8_t &modification::idType()
{
    return m_idType;
}

/*!
 * @brief This function sets a value in member dataSize
 * @param _dataSize New value for member dataSize
 */
void modification::dataSize(
    uint8_t _dataSize)
{
    m_dataSize = _dataSize;
}

/*!
 * @brief This function returns the value of member dataSize
 * @return Value of member dataSize
 */
uint8_t modification::dataSize() const
{
    return m_dataSize;
}

/*!
 * @brief This function returns a reference to member dataSize
 * @return Reference to member dataSize
 */
uint8_t &modification::dataSize()
{
    return m_dataSize;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void modification::data(
    const std::array<uint8_t, 8> &_data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void modification::data(
    std::array<uint8_t, 8> &&_data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<uint8_t, 8> &modification::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<uint8_t, 8> &modification::data()
{
    return m_data;
}

size_t modification::getKeyMaxCdrSerializedSize(
    size_t current_alignment)
{
    size_t current_align = current_alignment;

    return current_align;
}

bool modification::isKeyDefined()
{
    return false;
}

void modification::serializeKey(
    eprosima::fastcdr::Cdr &scdr) const
{
    (void)scdr;
}
