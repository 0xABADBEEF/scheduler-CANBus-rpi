// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file dataPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "dataPubSubTypes.h"

using SerializedPayload_t = eprosima::fastrtps::rtps::SerializedPayload_t;
using InstanceHandle_t = eprosima::fastrtps::rtps::InstanceHandle_t;

can_frame_from_ddsPubSubType::can_frame_from_ddsPubSubType()
{
    setName("can_frame_from_dds");
    auto type_size = can_frame_from_dds::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4;            /*encapsulation*/
    m_isGetKeyDefined = can_frame_from_dds::isKeyDefined();
    size_t keyLength = can_frame_from_dds::getKeyMaxCdrSerializedSize() > 16 ? can_frame_from_dds::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

can_frame_from_ddsPubSubType::~can_frame_from_ddsPubSubType()
{
    if (m_keyBuffer != nullptr)
    {
        free(m_keyBuffer);
    }
}

bool can_frame_from_ddsPubSubType::serialize(
    void *data,
    SerializedPayload_t *payload)
{
    can_frame_from_dds *p_type = static_cast<can_frame_from_dds *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->max_size);
    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        // Serialize the object.
        p_type->serialize(ser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    // Get the serialized length
    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
    return true;
}

bool can_frame_from_ddsPubSubType::deserialize(
    SerializedPayload_t *payload,
    void *data)
{
    // Convert DATA to pointer of your type
    can_frame_from_dds *p_type = static_cast<can_frame_from_dds *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->length);

    // Object that deserializes the data.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        // Deserialize the object.
        p_type->deserialize(deser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> can_frame_from_ddsPubSubType::getSerializedSizeProvider(
    void *data)
{
    return [data]() -> uint32_t
    {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<can_frame_from_dds *>(data))) +
               4u /*encapsulation*/;
    };
}

void *can_frame_from_ddsPubSubType::createData()
{
    return reinterpret_cast<void *>(new can_frame_from_dds());
}

void can_frame_from_ddsPubSubType::deleteData(
    void *data)
{
    delete (reinterpret_cast<can_frame_from_dds *>(data));
}

bool can_frame_from_ddsPubSubType::getKey(
    void *data,
    InstanceHandle_t *handle,
    bool force_md5)
{
    if (!m_isGetKeyDefined)
    {
        return false;
    }

    can_frame_from_dds *p_type = static_cast<can_frame_from_dds *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             can_frame_from_dds::getKeyMaxCdrSerializedSize());

    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
    p_type->serializeKey(ser);
    if (force_md5 || can_frame_from_dds::getKeyMaxCdrSerializedSize() > 16)
    {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_md5.digest[i];
        }
    }
    else
    {
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

can_frame_from_busPubSubType::can_frame_from_busPubSubType()
{
    setName("can_frame_from_bus");
    auto type_size = can_frame_from_bus::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4;            /*encapsulation*/
    m_isGetKeyDefined = can_frame_from_bus::isKeyDefined();
    size_t keyLength = can_frame_from_bus::getKeyMaxCdrSerializedSize() > 16 ? can_frame_from_bus::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

can_frame_from_busPubSubType::~can_frame_from_busPubSubType()
{
    if (m_keyBuffer != nullptr)
    {
        free(m_keyBuffer);
    }
}

bool can_frame_from_busPubSubType::serialize(
    void *data,
    SerializedPayload_t *payload)
{
    can_frame_from_bus *p_type = static_cast<can_frame_from_bus *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->max_size);
    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        // Serialize the object.
        p_type->serialize(ser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    // Get the serialized length
    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
    return true;
}

bool can_frame_from_busPubSubType::deserialize(
    SerializedPayload_t *payload,
    void *data)
{
    // Convert DATA to pointer of your type
    can_frame_from_bus *p_type = static_cast<can_frame_from_bus *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->length);

    // Object that deserializes the data.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        // Deserialize the object.
        p_type->deserialize(deser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> can_frame_from_busPubSubType::getSerializedSizeProvider(
    void *data)
{
    return [data]() -> uint32_t
    {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<can_frame_from_bus *>(data))) +
               4u /*encapsulation*/;
    };
}

void *can_frame_from_busPubSubType::createData()
{
    return reinterpret_cast<void *>(new can_frame_from_bus());
}

void can_frame_from_busPubSubType::deleteData(
    void *data)
{
    delete (reinterpret_cast<can_frame_from_bus *>(data));
}

bool can_frame_from_busPubSubType::getKey(
    void *data,
    InstanceHandle_t *handle,
    bool force_md5)
{
    if (!m_isGetKeyDefined)
    {
        return false;
    }

    can_frame_from_bus *p_type = static_cast<can_frame_from_bus *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             can_frame_from_bus::getKeyMaxCdrSerializedSize());

    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
    p_type->serializeKey(ser);
    if (force_md5 || can_frame_from_bus::getKeyMaxCdrSerializedSize() > 16)
    {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_md5.digest[i];
        }
    }
    else
    {
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}

modificationPubSubType::modificationPubSubType()
{
    setName("modification");
    auto type_size = modification::getMaxCdrSerializedSize();
    type_size += eprosima::fastcdr::Cdr::alignment(type_size, 4); /* possible submessage alignment */
    m_typeSize = static_cast<uint32_t>(type_size) + 4;            /*encapsulation*/
    m_isGetKeyDefined = modification::isKeyDefined();
    size_t keyLength = modification::getKeyMaxCdrSerializedSize() > 16 ? modification::getKeyMaxCdrSerializedSize() : 16;
    m_keyBuffer = reinterpret_cast<unsigned char *>(malloc(keyLength));
    memset(m_keyBuffer, 0, keyLength);
}

modificationPubSubType::~modificationPubSubType()
{
    if (m_keyBuffer != nullptr)
    {
        free(m_keyBuffer);
    }
}

bool modificationPubSubType::serialize(
    void *data,
    SerializedPayload_t *payload)
{
    modification *p_type = static_cast<modification *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->max_size);
    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);
    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
    // Serialize encapsulation
    ser.serialize_encapsulation();

    try
    {
        // Serialize the object.
        p_type->serialize(ser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    // Get the serialized length
    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength());
    return true;
}

bool modificationPubSubType::deserialize(
    SerializedPayload_t *payload,
    void *data)
{
    // Convert DATA to pointer of your type
    modification *p_type = static_cast<modification *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(payload->data), payload->length);

    // Object that deserializes the data.
    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN, eprosima::fastcdr::Cdr::DDS_CDR);

    // Deserialize encapsulation.
    deser.read_encapsulation();
    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    try
    {
        // Deserialize the object.
        p_type->deserialize(deser);
    }
    catch (eprosima::fastcdr::exception::NotEnoughMemoryException & /*exception*/)
    {
        return false;
    }

    return true;
}

std::function<uint32_t()> modificationPubSubType::getSerializedSizeProvider(
    void *data)
{
    return [data]() -> uint32_t
    {
        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<modification *>(data))) +
               4u /*encapsulation*/;
    };
}

void *modificationPubSubType::createData()
{
    return reinterpret_cast<void *>(new modification());
}

void modificationPubSubType::deleteData(
    void *data)
{
    delete (reinterpret_cast<modification *>(data));
}

bool modificationPubSubType::getKey(
    void *data,
    InstanceHandle_t *handle,
    bool force_md5)
{
    if (!m_isGetKeyDefined)
    {
        return false;
    }

    modification *p_type = static_cast<modification *>(data);

    // Object that manages the raw buffer.
    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char *>(m_keyBuffer),
                                             modification::getKeyMaxCdrSerializedSize());

    // Object that serializes the data.
    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);
    p_type->serializeKey(ser);
    if (force_md5 || modification::getKeyMaxCdrSerializedSize() > 16)
    {
        m_md5.init();
        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
        m_md5.finalize();
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_md5.digest[i];
        }
    }
    else
    {
        for (uint8_t i = 0; i < 16; ++i)
        {
            handle->value[i] = m_keyBuffer[i];
        }
    }
    return true;
}
